{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let TimeAgoPipe = /*#__PURE__*/(() => {\n  class TimeAgoPipe {\n    constructor(changeDetectorRef, ngZone) {\n      this.changeDetectorRef = changeDetectorRef;\n      this.ngZone = ngZone;\n    }\n\n    transform(value) {\n      this.removeTimer();\n      let d = new Date(value);\n      let now = new Date();\n      let seconds = Math.round(Math.abs((now.getTime() - d.getTime()) / 1000));\n      let timeToUpdate = Number.isNaN(seconds) ? 1000 : this.getSecondsUntilUpdate(seconds) * 1000;\n      this.timer = this.ngZone.runOutsideAngular(() => {\n        if (typeof window !== 'undefined') {\n          return window.setTimeout(() => {\n            this.ngZone.run(() => this.changeDetectorRef.markForCheck());\n          }, timeToUpdate);\n        }\n\n        return null;\n      });\n      let minutes = Math.round(Math.abs(seconds / 60));\n      let hours = Math.round(Math.abs(minutes / 60));\n      let days = Math.round(Math.abs(hours / 24));\n      let months = Math.round(Math.abs(days / 30.416));\n      let years = Math.round(Math.abs(days / 365));\n\n      if (Number.isNaN(seconds)) {\n        return '';\n      } else if (seconds <= 45) {\n        return 'a few seconds ago';\n      } else if (seconds <= 90) {\n        return 'a minute ago';\n      } else if (minutes <= 45) {\n        return minutes + ' minutes ago';\n      } else if (minutes <= 90) {\n        return 'an hour ago';\n      } else if (hours <= 22) {\n        return hours + ' hours ago';\n      } else if (hours <= 36) {\n        return 'a day ago';\n      } else if (days <= 25) {\n        return days + ' days ago';\n      } else if (days <= 45) {\n        return 'a month ago';\n      } else if (days <= 345) {\n        return months + ' months ago';\n      } else if (days <= 545) {\n        return 'a year ago';\n      } else {\n        // (days > 545)\n        return years + ' years ago';\n      }\n    }\n\n    ngOnDestroy() {\n      this.removeTimer();\n    }\n\n    removeTimer() {\n      if (this.timer) {\n        window.clearTimeout(this.timer);\n        this.timer = null;\n      }\n    }\n\n    getSecondsUntilUpdate(seconds) {\n      let min = 60;\n      let hr = min * 60;\n      let day = hr * 24;\n\n      if (seconds < min) {\n        // less than 1 min, update every 2 secs\n        return 2;\n      } else if (seconds < hr) {\n        // less than an hour, update every 30 secs\n        return 30;\n      } else if (seconds < day) {\n        // less then a day, update every 5 mins\n        return 300;\n      } else {\n        // update every hour\n        return 3600;\n      }\n    }\n\n  }\n\n  TimeAgoPipe.ɵfac = function TimeAgoPipe_Factory(t) {\n    return new (t || TimeAgoPipe)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16), i0.ɵɵdirectiveInject(i0.NgZone, 16));\n  };\n\n  TimeAgoPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"timeAgo\",\n    type: TimeAgoPipe,\n    pure: false\n  });\n  return TimeAgoPipe;\n})();","map":null,"metadata":{},"sourceType":"module"}